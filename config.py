from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
import random
import asyncio
import pickle
import qiwi

TOKEN = "1080043755:AAE_7UqPSA-2sBYIE_ipSp7nrX4Mu056jrs"

photo = InlineKeyboardButton("ü§©–†–∞–∑–¥–µ—Ç—å", callback_data='photo')
balance = InlineKeyboardButton("üóÑ–ë–∞–ª–∞–Ω—Å", callback_data='balance')
subs = InlineKeyboardButton("üåê–ü–æ–¥–ø–∏—Å–∫–∞", callback_data='subs')
free = InlineKeyboardButton("üéÅ–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã", callback_data='free')

back = InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data='back')
menu = InlineKeyboardButton("‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data='back')

repl = InlineKeyboardButton("–ö—É–ø–∏—Ç—å –∫–æ–∏–Ω—ã", callback_data='add')
ad_subs = InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='add_s')

sber = InlineKeyboardButton("–°–±–µ—Ä–±–∞–Ω–∫", callback_data='sber')
qiwi = InlineKeyboardButton("QIWI", callback_data='qiwi')

sber_s = InlineKeyboardButton("–°–±–µ—Ä–±–∞–Ω–∫", callback_data='sber_s')
qiwi_s = InlineKeyboardButton("QIWI", callback_data='qiwi_s')

sub_1 = InlineKeyboardButton("–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data='sub1')
sub_2 = InlineKeyboardButton("–ù–∞ –º–µ—Å—è—Ü", callback_data='sub2')
sub_3 = InlineKeyboardButton("–ù–∞ 2 –º–µ—Å—è—Ü–∞", callback_data='sub3')
sub_4 = InlineKeyboardButton("–ù–∞ 6 –º–µ—Å—è—Ü–µ–≤", callback_data='sub4')

agree_coins = InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω", callback_data='agree_coins')
agree_subs = InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω", callback_data='agree_subs')

#126c962c6eaf147aae085d416ae44366

def randls():
    a = random.random()
    b = float("{0:.2f}".format(a))
    return b

def chek_sber(value):
    with open("value.txt" , 'rb') as f:
        sum = pickle.load(f)
    for i in sum:
        if i == value:
            return True
    return False

def string(call):
    string =str("id/") + str(int(call["id"])) + str(".txt")
    with open(string , 'rb') as f:
        id = pickle.load(f)
    sum = id[1]
    return sum

def coins(call):
    string =str("id/") + str(int(call["id"])) + str(".txt")
    with open(string , 'rb') as f:
        id = pickle.load(f)
    sum = id[0]
    return sum

def this_sub_a(data, string):
    if data == "sub1":
        a = float(110) + randls() - 5
        mass = [1,a]
        subb = "–Ω–∞ –Ω–µ–¥–µ–ª—é"
        with open(string , 'wb') as f:
                pickle.dump(mass, f)
        return a
    elif data == "sub2":
        a = float(320) + randls() - 5
        mass = [2,a]
        subb = "–Ω–∞ –º–µ—Å—è—Ü"
        with open(string , 'wb') as f:
                pickle.dump(mass, f)
        return a
    elif data == "sub3":
        a = float(499) + randls() - 5
        mass = [3,a]
        subb = "–Ω–∞ 2 –º–µ—Å—è—Ü–∞"
        with open(string , 'wb') as f:
                pickle.dump(mass, f)
        return a
    elif data == "sub4":
        a = float(1199) + randls() - 5
        mass = [4,a]
        subb = "–Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤"
        with open(string , 'wb') as f:
                pickle.dump(mass, f)
        return a

def this_sub_subb(data, string):
    if data == "sub1":
        a = float(110) + randls() - 5
        mass = [1,a]
        subb = "–Ω–∞ –Ω–µ–¥–µ–ª—é"
        with open(string , 'wb') as f:
                pickle.dump(mass, f)
        return subb
    elif data == "sub2":
        a = float(320) + randls() - 5
        mass = [2,a]
        subb = "–Ω–∞ –º–µ—Å—è—Ü"
        with open(string , 'wb') as f:
                pickle.dump(mass, f)
        return subb
    elif data == "sub3":
        a = float(499) + randls() - 5
        mass = [3,a]
        subb = "–Ω–∞ 2 –º–µ—Å—è—Ü–∞"
        with open(string , 'wb') as f:
                pickle.dump(mass, f)
        return subb
    elif data == "sub4":
        a = float(1199) + randls() - 5
        mass = [4,a]
        subb = "–Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤"
        with open(string , 'wb') as f:
                pickle.dump(mass, f)
        return subb

def subs_sum(string):
    with open(string , 'rb') as f:
        id = pickle.load(f)
    sum = id[1]
    return sum

def subs_type(string):
    with open(string , 'rb') as f:
        id = pickle.load(f)
    sum = id[0]
    return sum

def check_photo(name):
    try:
        photo = open(name, 'rb')
        return True
    except Exception:
        return False
